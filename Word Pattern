/*
Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.

Examples:
pattern = "abba", str = "dog cat cat dog" should return true.
pattern = "abba", str = "dog cat cat fish" should return false.
pattern = "aaaa", str = "dog cat cat dog" should return false.
pattern = "abba", str = "dog dog dog dog" should return false.
Notes:
You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.
*/

//  remember this is a bijection or say one-to-one mapping.
//  cpp_split:
//  istringstream iss(someString);
//  while(getline(iss, word, delimit)){}

class Solution {
public:
    bool wordPattern(string pattern, string str) {
        istringstream iss{str};
        string word;
        vector<string> vec;
        while(getline(iss, word, ' ')){
            vec.push_back(word);
        }
        if(vec.size() != pattern.size()){
            return false;
        }
        unordered_map<char, string> map_c2s;
        unordered_map<string, char> map_s2c;
        
        for(int i = 0; i < pattern.size(); i++){
            if(map_c2s.find(pattern[i]) != map_c2s.end()){
                if(map_c2s[pattern[i]].compare(vec[i]) != 0){
                    return false;
                }
            }
            else{
                if(map_s2c.find(vec[i]) != map_s2c.end()){
                    return false;
                }   
                map_c2s[pattern[i]] = vec[i];
                map_s2c[vec[i]] = pattern[i];
            }
        }
        return true;
    }
};
